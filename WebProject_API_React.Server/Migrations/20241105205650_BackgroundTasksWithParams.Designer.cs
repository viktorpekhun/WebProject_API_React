// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebProject_API_React.Server.Data;

#nullable disable

namespace WebProject_API_React.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241105205650_BackgroundTasksWithParams")]
    partial class BackgroundTasksWithParams
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebProject_API_React.Server.Models.BackgroundTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BackgroundTasks");
                });

            modelBuilder.Entity("WebProject_API_React.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "myemail1@gmail.com",
                            Password = "password1",
                            RefreshToken = "token",
                            RefreshTokenExpiryTime = new DateTime(2024, 11, 5, 22, 56, 49, 782, DateTimeKind.Utc).AddTicks(2720),
                            Username = "Bob"
                        },
                        new
                        {
                            Id = 2,
                            Email = "myemail2@gmail.com",
                            Password = "password2",
                            RefreshToken = "token",
                            RefreshTokenExpiryTime = new DateTime(2024, 11, 5, 22, 56, 49, 782, DateTimeKind.Utc).AddTicks(2725),
                            Username = "Rick"
                        },
                        new
                        {
                            Id = 3,
                            Email = "myemail3@gmail.com",
                            Password = "password3",
                            RefreshToken = "token",
                            RefreshTokenExpiryTime = new DateTime(2024, 11, 5, 22, 56, 49, 782, DateTimeKind.Utc).AddTicks(2727),
                            Username = "John"
                        });
                });

            modelBuilder.Entity("WebProject_API_React.Server.Models.BackgroundTask", b =>
                {
                    b.HasOne("WebProject_API_React.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
